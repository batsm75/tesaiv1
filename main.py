import osimport jsonimport timeimport requests# import numpy # numpy dihapus di versi sebelumnyaimport randomimport re # Import untuk regex (cek matematika)import textwrap # Import untuk text wrapping# --- Konfigurasi ---# Mendapatkan direktori skrip saat ini untuk menyimpan credentials.json secara konsistenSCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))CREDENTIALS_FILE = os.path.join(SCRIPT_DIR, 'credentials.json')# BINANCE API untuk data harga dan historis (lebih stabil dan akurat dari CoinGecko gratis)BINANCE_API_BASE = 'https://api.binance.com/api/v3'REFRESH_INTERVAL_SECONDS = 2 # Interval refresh data harga menjadi 2 detik# API Key NewsData.io AndaNEWS_API_KEY = 'pub_04af9448698b4fc89f8d13e321385574' NEWS_API_BASE = 'https://newsdata.io/api/1/news'# API Key Gemini (untuk AI Coach Mentor di Menu 3)GEMINI_API_KEY = 'AIzaSyDFyOGaXX75V5duTsfJFGx-S3NaFe__e5s' GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"GEMINI_MODEL_NAME = "gemini-2.0-flash"# --- Fungsi Utilitas ---def get_terminal_width():    """Mendapatkan lebar terminal, dengan fallback."""    try:        return os.get_terminal_size().columns    except OSError:        return 80 # Fallback default widthdef center_text(text, width):    """Menengahkan teks dalam lebar tertentu."""    if len(text) >= width:        return text    padding = (width - len(text)) // 2    return " " * padding + text + " " * (width - len(text) - padding)def print_wrapped(text, initial_indent="", subsequent_indent="", width=None):    """Mencetak teks dengan wrapping otomatis sesuai lebar terminal."""    if width is None:        width = get_terminal_width()        effective_width = width - len(initial_indent)    wrapped_lines = textwrap.fill(        text,        width=effective_width,        initial_indent=initial_indent,        subsequent_indent=subsequent_indent,        replace_whitespace=True    )    print(wrapped_lines)def clear_screen():    """Membersihkan layar konsol."""    os.system('clear' if os.name == 'posix' else 'cls')def format_idr(amount):    """Memformat angka menjadi format mata uang IDR."""    return f"Rp {int(amount):,}".replace(",", ".")def get_current_idr_price_binance(symbol):    """Mengambil harga koin saat ini dari Binance dalam USD dan konversi ke IDR."""    try:        # Fetch USD price        ticker_url = f"{BINANCE_API_BASE}/ticker/price?symbol={symbol.upper()}USDT"        response = requests.get(ticker_url)        response.raise_for_status()        data = response.json()        usd_price = float(data['price'])        # Get latest IDR-USD exchange rate (simplified or external API if needed)        # For simplicity, we'll use a fixed rate or a simple public API if available.        # A more robust solution would integrate with an FX API for USD-IDR.        # For now, let's use a very simplified approach or a placeholder.        # You can add a proper FX API call here if needed.        # Example: https://api.exchangerate-api.com/v4/latest/USD        # Let's use a constant for demo.        usd_to_idr_rate = 16200 # Perkiraan nilai tukar USD ke IDR        return usd_price * usd_to_idr_rate    except requests.exceptions.RequestException as e:        print_wrapped(f"ERROR: Gagal mengambil harga dari Binance ({symbol}): {e}", width=get_terminal_width())        return None    except json.JSONDecodeError:        print_wrapped(f"ERROR: Gagal mendekode respons harga dari Binance ({symbol}).", width=get_terminal_width())        return None    except KeyError:        print_wrapped(f"ERROR: Simbol {symbol.upper()}USDT tidak ditemukan di Binance atau format respons tidak terduga.", width=get_terminal_width())        return None    except Exception as e:        print_wrapped(f"ERROR: Terjadi kesalahan tidak terduga saat mengambil harga Binance: {e}", width=get_terminal_width())        return Nonedef get_historical_prices_binance(symbol, interval='1d', limit=100):    """    Mengambil data harga historis (OHLCV) dari Binance.    symbol: misal 'BTCUSDT'    interval: '1d' (1 hari), '4h' (4 jam), dll.    limit: jumlah candle terakhir    """    try:        klines_url = f"{BINANCE_API_BASE}/klines?symbol={symbol.upper()}USDT&interval={interval}&limit={limit}"        response = requests.get(klines_url)        response.raise_for_status()        klines_data = response.json()        prices_list = []        ohlcv_data = [] # List of dictionaries for OHLCV                # Binance klines format:        # [        #   [        #     1499040000000,      // Open time        #     "0.01634790",       // Open        #     "0.80000000",       // High        #     "0.01575800",       // Low        #     "0.01577100",       // Close        #     "148976.16124000",  // Volume        #     1499644799999,      // Close time        #     "2434.19013972",    // Quote asset volume        #     308,                // Number of trades        #     "1756.87402397",    // Taker buy base asset volume        #     "28.46694368",      // Taker buy quote asset volume        #     "1792.34217159"      // Ignore        #   ]        # ]                usd_to_idr_rate = 16200 # Perkiraan nilai tukar USD ke IDR        for kline in klines_data:            open_p = float(kline[1]) * usd_to_idr_rate            high_p = float(kline[2]) * usd_to_idr_rate            low_p = float(kline[3]) * usd_to_idr_rate            close_p = float(kline[4]) * usd_to_idr_rate                        prices_list.append(close_p) # Only close prices for EMA, RSI, MACD            ohlcv_data.append({'open': open_p, 'high': high_p, 'low': low_p, 'close': close_p}) # For candlestick detection        return prices_list, ohlcv_data    except requests.exceptions.RequestException as e:        print_wrapped(f"ERROR: Gagal mengambil data historis dari Binance ({symbol}): {e}", width=get_terminal_width())        return [], []    except json.JSONDecodeError:        print_wrapped(f"ERROR: Gagal mendekode respons historis dari Binance ({symbol}).", width=get_terminal_width())        return [], []    except KeyError:        print_wrapped(f"ERROR: Simbol {symbol.upper()}USDT tidak ditemukan di Binance atau format respons klines tidak terduga.", width=get_terminal_width())        return [], []    except Exception as e:        print_wrapped(f"ERROR: Terjadi kesalahan tidak terduga saat mengambil data historis Binance: {e}", width=get_terminal_width())        return [], []def get_crypto_news(query_term="crypto", num_articles=3):    """Mengambil berita kripto dari NewsData.io API."""    if not NEWS_API_KEY:         print_wrapped("⚠ Error: NEWS_API_KEY belum diatur. Harap daftar di NewsData.io untuk mendapatkan kunci API.", width=get_terminal_width())        return ["Fitur berita tidak aktif."]            try:        params = {            'apikey': NEWS_API_KEY,            'q': query_term,            'language': 'en',        }                response = requests.get(NEWS_API_BASE, params=params, timeout=5)        response.raise_for_status()        news_data = response.json()        articles = []        if 'results' in news_data and news_data['results']:            for i, article in enumerate(news_data['results']):                if i >= num_articles:                    break                title = article.get('title', 'Tidak ada judul')                articles.append(f"- {title}")                 if not articles:            articles.append("Tidak ada berita terkini yang ditemukan untuk topik ini.")            articles.append("Coba lagi nanti atau periksa koneksi internet Anda.")                return articles    except requests.exceptions.RequestException as e:        print_wrapped(f"❌ Gagal mengambil berita: {e}. Pastikan NEWS_API_KEY benar dan ada koneksi internet.", width=get_terminal_width())        return ["Fitur berita tidak aktif karena masalah koneksi/API."]    except json.JSONDecodeError:        print_wrapped("❌ Gagal mendekode respons berita dari API.", width=get_terminal_width())        return ["Fitur berita tidak aktif karena respons API tidak valid."]# --- Perhitungan Indikator tanpa NumPy ---def calculate_ema_py(prices, period):    """Menghitung Exponential Moving Average (EMA) tanpa NumPy."""    if len(prices) < period:        return None        k = 2 / (period + 1)        ema_values = []    # Hitung SMA awal untuk EMA pertama    current_ema = sum(prices[:period]) / period    ema_values.append(current_ema)        for price in prices[period:]:        current_ema = (price * k) + (current_ema * (1 - k))        ema_values.append(current_ema)            return ema_values[-1] # Mengembalikan EMA terbarudef calculate_rsi_py(prices, period=14):    """Menghitung Relative Strength Index (RSI) tanpa NumPy."""    if len(prices) < period + 1:        return None    # Hitung perubahan harga    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]        gains = [d if d > 0 else 0 for d in deltas]    losses = [-d if d < 0 else 0 for d in deltas]    # Inisialisasi average gain/loss pertama (simple moving average dari periode awal)    avg_gain = sum(gains[:period]) / period    avg_loss = sum(losses[:period]) / period    # Hitung rata-rata gain/loss yang dihaluskan (Smoothed Moving Average = EMA)    # Ini adalah rumus SMMA (Smoothed Moving Average) yang digunakan di RSI    for i in range(period, len(gains)):        avg_gain = ((avg_gain * (period - 1)) + gains[i]) / period        avg_loss = ((avg_loss * (period - 1)) + losses[i]) / period        if avg_loss == 0:        return 100.0 if avg_gain > 0 else 50.0 # Jika tidak ada kerugian, RSI 100 jika ada gain, 50 jika tidak ada        rs = avg_gain / avg_loss    rsi = 100 - (100 / (1 + rs))    return rsidef calculate_macd_py(prices, fast_period=12, slow_period=26, signal_period=9):    """Menghitung Moving Average Convergence Divergence (MACD) tanpa NumPy."""    if len(prices) < max(fast_period, slow_period, signal_period) + 1:        return "N/A"    def _calculate_ema_series_py(data, period):        if len(data) < period:            return []        k = 2 / (period + 1)        ema_series = [0.0] * len(data)        # Hitung EMA awal menggunakan SMA dari periode pertama        ema_series[period-1] = sum(data[:period]) / period         for i in range(period, len(data)):            ema_series[i] = (data[i] * k) + (ema_series[i-1] * (1 - k))        return ema_series[period-1:]     ema_fast_series = _calculate_ema_series_py(prices, fast_period)    ema_slow_series = _calculate_ema_series_py(prices, slow_period)    min_len = min(len(ema_fast_series), len(ema_slow_series))    if min_len == 0: return "N/A"    # Pastikan panjangnya cocok untuk pengurangan    # Ambil bagian yang sama panjang dari akhir kedua seri EMA    macd_line_series = [ema_fast_series[i] - ema_slow_series[i] for i in range(len(ema_fast_series) - min_len, len(ema_fast_series))]        if len(macd_line_series) < signal_period:        return "N/A"    signal_line_series = _calculate_ema_series_py(macd_line_series, signal_period)    if len(macd_line_series) >= 2 and len(signal_line_series) >= 2:        if macd_line_series[-1] > signal_line_series[-1] and macd_line_series[-2] <= signal_line_series[-2]:            return "Golden Cross"        elif macd_line_series[-1] < signal_line_series[-1] and macd_line_series[-2] >= signal_line_series[-2]:            return "Death Cross"    return "Konsolidasi"# --- Fungsi Deteksi Pola Candlestick ---def detect_candlestick_pattern(ohlc_data):    """    Mendeteksi pola candlestick dasar berdasarkan data OHLC yang disimulasikan/diperoleh.    Akurasi sangat bergantung pada kualitas dan jumlah data OHLC yang tersedia.    """    patterns = []    if not ohlc_data or len(ohlc_data) < 1:        return [{            "name": "DATA TIDAK CUKUP",            "type": "Informasi Terbatas",            "description": "Tidak ada cukup data historis yang memadai untuk mendeteksi pola candlestick. Mohon pastikan data tersedia (minimal 3 candle untuk pola umum).",            "action": "Lanjutkan analisis indikator lain atau coba lagi nanti."        }]        last_candle = ohlc_data[-1]    open_c = last_candle['open']    high_c = last_candle['high']    low_c = last_candle['low']    close_c = last_candle['close']    body_c = abs(close_c - open_c)    range_total_c = high_c - low_c        if range_total_c == 0:        range_total_c = 0.0000001     body_ratio_to_range_c = body_c / range_total_c    prev_candle = None    if len(ohlc_data) >= 2:        prev_candle = ohlc_data[-2]        candle1 = None    candle2 = None     if len(ohlc_data) >= 3:        candle1 = ohlc_data[-3]        candle2 = ohlc_data[-2]     # --- Pola 1-Candle ---    # DOJI    if body_ratio_to_range_c < 0.05:        patterns.append({            "name": "DOJI",            "type": "Ketidakpastian/Netral",            "description": "Harga pembukaan dan penutupan hampir sama, membentuk body sangat tipis. Menunjukkan keraguan ekstrem di pasar dan keseimbangan antara pembeli-penjual. Sering menjadi sinyal potensi pembalikan atau kelanjutan konsolidasi.",            "action": "TUNGGU KONFIRMASI. Hindari posisi besar sampai arah pasar jelas."        })        # HAMMER (Bullish Reversal)    # Candle hijau atau merah, body kecil di atas, shadow bawah panjang    if body_ratio_to_range_c < 0.3 and \       (open_c - low_c) > (2 * body_c) and \       (high_c - close_c) < (0.2 * body_c):        patterns.append({            "name": "HAMMER",            "type": "Pembalikan Bullish Potensial",            "description": "Candle dengan body kecil di bagian atas dan shadow bawah yang panjang (minimal dua kali panjang body). Mengindikasikan bahwa tekanan jual yang kuat di awal telah ditolak oleh pembeli. Sinyal pembalikan bullish yang kuat jika muncul setelah tren turun yang jelas.",            "action": "Perhatikan konfirmasi bullish di candle berikutnya. Potensi BELI (LONG) jika berada di area support penting."        })        # INVERTED HAMMER (Bullish Reversal)    # Candle hijau atau merah, body kecil di bawah, shadow atas panjang    elif body_ratio_to_range_c < 0.3 and \         (high_c - close_c) > (2 * body_c) and \         (open_c - low_c) < (0.2 * body_c):        patterns.append({            "name": "INVERTED HAMMER",            "type": "Pembalikan Bullish Potensial",            "description": "Candle dengan body kecil di bagian bawah dan shadow atas yang panjang. Menunjukkan pembeli mencoba mendorong harga naik, namun penjual sempat menekan kembali. Jika diikuti konfirmasi, bisa menjadi sinyal pembalikan bullish yang kuat setelah tren turun.",            "action": "Perhatikan konfirmasi bullish. Potensi BELI (LONG) jika berada di area support."        })    # HANGING MAN (Bearish Reversal)    # Bentuk sama dengan Hammer, tapi konteks muncul setelah uptrend    if body_ratio_to_range_c < 0.3 and \       (open_c - low_c) > (2 * body_c) and \       (high_c - close_c) < (0.2 * body_c):        patterns.append({            "name": "HANGING MAN",            "type": "Pembalikan Bearish Potensial",            "description": "Candle dengan body kecil di bagian atas dan shadow bawah yang panjang. Muncul setelah tren naik, mengindikasikan tekanan jual mulai muncul di puncak tren. Sinyal potensi pembalikan turun dari puncak.",            "action": "Perhatikan konfirmasi bearish di candle berikutnya. Potensi JUAL (SHORT) jika berada di area resistance penting."        })    # SHOOTING STAR (Bearish Reversal)    # Bentuk sama dengan Inverted Hammer, tapi konteks muncul setelah uptrend    elif body_ratio_to_range_c < 0.3 and \         (high_c - close_c) > (2 * body_c) and \         (open_c - low_c) < (0.2 * body_c):        patterns.append({            "name": "SHOOTING STAR",            "type": "Pembalikan Bearish Potensial",            "description": "Candle dengan body kecil di bagian bawah dan shadow atas yang panjang. Menandakan penolakan kuat di harga tinggi, penjual berhasil menekan harga kembali. Sinyal kuat pembalikan turun jika muncul setelah tren naik yang jelas.",            "action": "Perhatikan konfirmasi bearish di candle berikutnya. Potensi JUAL (SHORT) jika berada di area resistance penting."        })    # --- Pola 2-Candle ---    if prev_candle:         # BULLISH ENGULFING        if prev_candle['close'] < prev_candle['open'] and \           close_c > open_c and \           close_c > prev_candle['open'] and \           open_c < prev_candle['close']:            patterns.append({                "name": "BULLISH ENGULFING",                "type": "Pembalikan Bullish Kuat",                "description": "Pola dua candle: candle merah bearish (sebelumnya) diikuti oleh candle hijau bullish (saat ini) yang lebih besar dan menelan seluruh body candle merah sebelumnya. Menandakan dominasi penuh pembeli dan pembalikan tren naik yang kuat.",                "action": "Sinyal BELI (LONG) yang kuat. Konfirmasi dengan volume tinggi jika memungkinkan."            })                # BEARISH ENGULFING        elif prev_candle['close'] > prev_candle['open'] and \             close_c < open_c and \             close_c < prev_candle['open'] and \             open_c > prev_candle['close']:            patterns.append({                "name": "BEARISH ENGULFING",                "type": "Pembalikan Bearish Kuat",                "description": "Pola dua candle: candle hijau bullish (sebelumnya) diikuti oleh candle merah bearish (saat ini) yang lebih besar dan menelan seluruh body candle hijau sebelumnya. Menandakan dominasi penuh penjual dan pembalikan tren turun yang kuat.",                "action": "Sinyal JUAL (SHORT) yang kuat. Konfirmasi dengan volume tinggi jika memungkinkan."            })                # DARK CLOUD COVER        elif prev_candle['close'] > prev_candle['open'] and \             open_c > close_c and \             open_c > prev_candle['close'] and \             close_c < (prev_candle['open'] + prev_candle['close']) / 2:             patterns.append({                "name": "DARK CLOUD COVER",                "type": "Pembalikan Bearish Potensial",                "description": "Pola dua candle: candle bullish kuat diikuti candle bearish yang dibuka lebih tinggi namun menutup jauh di bawah titik tengah body bullish sebelumnya. Mengindikasikan pelemahan tren naik dan potensi pembalikan turun.",                "action": "Waspada, pertimbangkan JUAL (SHORT) jika ada konfirmasi."            })                # PIERCING PATTERN        elif prev_candle['close'] < prev_candle['open'] and \             close_c > open_c and \             open_c < prev_candle['close'] and \             close_c > (prev_candle['open'] + prev_candle['close']) / 2:             patterns.append({                "name": "PIERCING PATTERN",                "type": "Pembalikan Bullish Potensial",                "description": "Pola dua candle: candle merah diikuti candle hijau yang dibuka lebih rendah namun menutup jauh di atas titik tengah body merah sebelumnya. Mengindikasikan pelemahan tren turun dan potensi pembalikan naik.",                "action": "Waspada, pertimbangkan BELI (LONG) jika ada konfirmasi."            })    # --- Pola 3-Candle ---    if candle1 and candle2: # Pastikan ada 3 candle untuk deteksi ini        # MORNING STAR (Bullish Reversal)        if candle1['close'] < candle1['open'] and \           abs(candle2['close'] - candle2['open']) < (0.5 * abs(candle1['close'] - candle1['open'])) and \           close_c > open_c and \           open_c > candle2['high'] and \           close_c > (candle1['open'] + candle1['close']) / 2 :             patterns.append({                "name": "MORNING STAR",                "type": "Pembalikan Bullish Kuat",                "description": "Pola tiga candle: diawali candle bearish besar, diikuti candle kecil (bisa Doji/Spinning Top) yang menunjukkan keraguan, dan diakhiri candle bullish besar yang menembus ke atas. Sinyal kuat transisi dari tekanan jual ke beli.",                "action": "Potensi BELI (LONG) yang sangat kuat setelah konfirmasi. Cari titik masuk di awal candle bullish ketiga."            })        # EVENING STAR (Bearish Reversal)        elif candle1['close'] > candle1['open'] and \             abs(candle2['close'] - candle2['open']) < (0.5 * abs(candle1['close'] - candle1['open'])) and \             close_c < open_c and \             open_c < candle2['low'] and \             close_c < (candle1['open'] + candle1['close']) / 2 :             patterns.append({                "name": "EVENING STAR",                "type": "Pembalikan Bearish Kuat",                "description": "Pola tiga candle: diawali candle bullish besar, diikuti candle kecil (bisa Doji/Spinning Top) yang menunjukkan keraguan, dan diakhiri candle bearish besar yang menembus ke bawah. Sinyal kuat transisi dari tekanan beli ke jual.",                "action": "Potensi JUAL (SHORT) yang sangat kuat setelah konfirmasi. Cari titik masuk di awal candle bearish ketiga."            })    if not patterns:        patterns.append({            "name": "TIDAK ADA POLA SPESIFIK TERIDENTIFIKASI",            "type": "Netral/Konsolidasi",            "description": "Dari data historis yang tersedia, tidak ada pola candlestick reversal atau continuation yang kuat teridentifikasi. Pasar mungkin sedang dalam fase konsolidasi atau pergerakan acak. Ini bisa berarti tidak ada sinyal jelas atau data yang kurang ideal. Selalu perhatikan volume dan konfirmasi dari indikator lain.",            "action": "Tetap HOLD atau tunggu sinyal yang lebih jelas. Lakukan riset fundamental tambahan dan pertimbangkan kondisi pasar makro."        })        return patterns# --- Autentikasi Pengguna ---def load_credentials():    """Memuat kredensial dari file."""    if os.path.exists(CREDENTIALS_FILE):        with open(CREDENTIALS_FILE, 'r') as f:            try:                return json.load(f)            except json.JSONDecodeError:                print_wrapped(f"⚠ Peringatan: File '{os.path.basename(CREDENTIALS_FILE)}' kosong atau rusak. Akan dibuat ulang.", width=get_terminal_width())                return {}            except Exception as e:                print_wrapped(f"❌ Error saat memuat kredensial: {e}", width=get_terminal_width())                return {}    return {}def save_credentials(username, password):    """Menyimpan kredensial ke file."""    try:        with open(CREDENTIALS_FILE, 'w') as f:            json.dump({'username': username, 'password': password}, f)    except Exception as e:        print_wrapped(f"❌ Error saat menyimpan kredensial: {e}", width=get_terminal_width())def register():    """Fungsi pendaftaran pengguna."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("📝 PENDAFTARAN AKUN", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Buat username dan password Anda untuk masuk.", width=width, initial_indent="")    username = input("👤 Buat Username: ").strip()    password = input("🔑 Buat Password: ").strip()    if not username or not password:        print_wrapped("❌ Username dan Password tidak boleh kosong!", width=width, initial_indent="")        time.sleep(2)        return False    save_credentials(username, password)    print_wrapped("Pendaftaran berhasil! Silakan login.", width=width, initial_indent="\n✅ ")    time.sleep(2)    return Truedef login():    """Fungsi login pengguna."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("🔐 SISTEM LOGIN", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    credentials = load_credentials()    if not credentials:        print_wrapped("Belum ada akun terdaftar. Silakan daftar terlebih dahulu.", width=width, initial_indent="")        time.sleep(2)        return register() # Jika belum ada, langsung minta register    attempts = 3    while attempts > 0:        entered_username = input("👤 Masukkan Username: ").strip()        entered_password = input("🔑 Masukkan Password: ").strip()        if entered_username == credentials.get('username') and entered_password == credentials.get('password'):            print_wrapped("Login berhasil! Selamat datang kembali.", width=width, initial_indent="\n✅ ")            time.sleep(1)            return True        else:            attempts -= 1            print_wrapped(f"Username atau password salah. Sisa percobaan: {attempts}", width=width, initial_indent="❌ ")            time.sleep(1)    print_wrapped("Terlalu banyak percobaan gagal. Akses ditolak.", width=width, initial_indent="🚫 ")    return False# Fitur AI Coach Trading (Istilah Umum)def ai_coach_trading_terms():    """Menampilkan istilah-istilah umum dalam dunia trading."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("🤖 AI COACH TRADING", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Berikut beberapa istilah umum dalam dunia trading:", width=width, initial_indent="")    print("") # Baris kosong    istilah = {        "Bullish": "Kondisi pasar ketika harga bergerak naik.",        "Bearish": "Kondisi pasar ketika harga bergerak turun.",        "Support": "Level harga di mana penurunan cenderung tertahan.",        "Resistance": "Level harga di mana kenaikan cenderung tertahan.",        "EMA": "Exponential Moving Average – rata-rata pergerakan harga dengan bobot lebih ke data terbaru.",        "SMA": "Simple Moving Average – rata-rata pergerakan harga biasa.",        "RSI": "Relative Strength Index – indikator momentum untuk mengukur kondisi overbought/oversold.",        "MACD": "Moving Average Convergence Divergence – indikator tren dan momentum.",        "Volume": "Jumlah aset yang diperdagangkan dalam jangka waktu tertentu.",        "Breakout": "Kondisi saat harga menembus level support/resistance dengan volume besar.",        "Scalping": "Strategi trading jangka sangat pendek.",        "Swing Trading": "Strategi trading dalam jangka menengah (hari hingga minggu).",        "Divergence": "Ketidaksesuaian arah antara harga dan indikator (misal RSI).",        "Long": "Posisi beli, berharap harga naik.",        "Short": "Posisi jual, berharap harga turun.",    }    for k, v in istilah.items():        print_wrapped(f"🔹 {k}: {v}", width=width, initial_indent="", subsequent_indent="   ")    input("\nTekan Enter untuk kembali ke menu utama...")# --- AI Coach Mentor (Percakapan) ---def _get_ai_mentor_system_prompt():    """Mengembalikan prompt sistem dasar untuk AI Mentor, dengan format yang diperbarui."""    return (        "Anda adalah 'Super Analizer AI Coach' dengan IQ 200+. Anda adalah mentor trading profesional "        "yang sangat berpengetahuan di bidang trading kripto dan forex. Jawablah pertanyaan "        "dengan sangat cerdas, jelas, ringkas, dan persuasif. "        "Fokus pada penjelasan yang to-the-point dan mudah dipahami. "        "Strukturkan jawaban Anda sebagai berikut untuk keterbacaan maksimum di konsol teks biasa:\n"        "1.  Gunakan judul UTAMA dengan HURUF KAPITAL PENUH (misalnya: KONSEP KUNCI).\n"        "2.  Gunakan sub-judul dengan Huruf Kapital di Awal Kata (misalnya: Aplikasi Praktis).\n"        "3.  Untuk daftar, gunakan angka (1., 2., 3.) atau tanda hubung (-) untuk poin-poin.\n"        "4.  Pisahkan paragraf dengan baris kosong untuk kerapian.\n"        "5.  JANGAN PERNAH menggunakan tanda bintang ganda (**) atau tiga bintang (***) untuk format tebal atau miring.\n"        "Selain itu, berikan ANALISIS SENTIMEN PASAR yang mendalam, menjelaskan 'mood' pasar secara psikologis.\n"        "Sajikan strategi trading dengan gaya Timothy Ronald: langsung, berani, fokus pada potensi kekayaan jangka panjang dan eksekusi yang tegas. Hindari keraguan.\n"        "AKHIRI setiap jawaban dengan satu kutipan MOTIVASI hidup atau trading yang inspiratif dan relevan.\n"        "Jika pertanyaan adalah perhitungan matematika sederhana, jawablah hanya dengan angka hasil akhirnya. "        "Jika pertanyaan terkait trading, berikan jawaban layaknya seorang mentor profesional yang terpercaya."    )def ask_ai_mentor_gemini(user_question):    """Mengirim pertanyaan ke Gemini API (untuk AI Coach Mentor di Menu 3)."""    if not GEMINI_API_KEY:         print_wrapped("⚠ Error: GEMINI_API_KEY belum diatur. Harap dapatkan kunci API Gemini Anda dari Google AI Studio. Fitur ini tidak dapat digunakan.", width=get_terminal_width())        return "ERROR: API Key tidak ada."    system_prompt = _get_ai_mentor_system_prompt()    try:        chat_history = [            {"role": "user", "parts": [{"text": system_prompt + "\n\n" + user_question}]}        ]        payload = {"contents": chat_history}                response = requests.post(            f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",            headers={'Content-Type': 'application/json'},            json=payload,            timeout=15         )        response.raise_for_status()                 result = response.json()                if result.get('candidates') and result['candidates'][0].get('content') and result['candidates'][0]['content'].get('parts'):            ai_response = result['candidates'][0]['content']['parts'][0]['text']            return ai_response        else:            return "Maaf, saya tidak dapat menghasilkan respons saat ini. Mungkin ada masalah dengan respons API atau struktur respons tidak terduga."    except requests.exceptions.Timeout:        return "Waktu respons habis. Pastikan koneksi internet Anda stabil atau coba lagi nanti."    except requests.exceptions.RequestException as e:        if response.status_code == 401:            return f"❌ ERROR API Gemini: Unauthorized (401). API Key Anda mungkin tidak valid atau belum diaktifkan. Silakan cek di Google AI Studio."        return f"Gagal menghubungi server API Gemini. Error: {e}"    except json.JSONDecodeError:        return "Gagal mendekode respons dari API Gemini. Coba lagi."    except Exception as e:        return f"Terjadi kesalahan tak terduga: {e}"def start_general_ai_coach_conversation():    """Memulai sesi percakapan dengan AI Coach Mentor (Gemini)."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("💡 AI COACH MENTOR (Global)", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Selamat datang, murid. Ajukan pertanyaan apapun tentang trading kripto atau forex.", width=width, initial_indent="")    print_wrapped("Ketik 'keluar' untuk mengakhiri sesi dan kembali ke menu utama.", width=width, initial_indent="")    while True:        user_input = input("\nAnda (Mentor): ").strip()        if user_input.lower() == 'keluar':            print_wrapped("AI Coach: Sampai jumpa, semoga sukses di pasar!", width=width, initial_indent="AI Coach: ")            time.sleep(1)            break                math_pattern = re.compile(r'^\s*(\d+(\.\d+)?)\s*([+\-*/])\s*(\d+(\.\d+)?)\s*$')        match = math_pattern.match(user_input)                if match:            try:                num1 = float(match.group(1))                operator = match.group(3)                num2 = float(match.group(4))                                if operator == '+':                    result = num1 + num2                elif operator == '-':                    result = num1 - num2                elif operator == '*':                    result = num1 * num2                elif operator == '/':                    if num2 == 0:                        result = "Tidak bisa dibagi nol!"                    else:                        result = num1 / num2                                print_wrapped(f"AI Coach: Hasilnya adalah: {result}", width=width, initial_indent="AI Coach: ")            except Exception:                 response = ask_ai_mentor_gemini(user_input) # Panggil Gemini                print_wrapped(f"AI Coach: {response}", width=width, initial_indent="AI Coach: ")        else:            print_wrapped("AI Coach: Berpikir...", width=width, initial_indent="AI Coach: ")            response = ask_ai_mentor_gemini(user_input) # Panggil Gemini            print_wrapped(f"AI Coach: {response}", width=width, initial_indent="AI Coach: ")# --- Analisis Trading (Diperbarui untuk memanggil sesi mentor di handle_ai_questions) ---def get_dynamic_tips(coach_suggestion, market_psychology, rsi, macd_status, is_crypto=True):    """Menghasilkan tips trading dinamis berdasarkan kondisi pasar."""    tips = [        "- Selalu lakukan riset mendalam (DYOR) sebelum mengambil keputusan trading.",        "- Manfaatkan alat analisis teknikal dan fundamental secara bersamaan.",        "- Jangan pernah menginvestasikan lebih dari yang Anda mampu untuk rugi.",        "- Disiplin adalah kunci: patuhi rencana trading Anda dan hindari FOMO/FUD.",        "- Edukasi diri secara terus-menerus tentang dinamika pasar."    ]    # Tips berdasarkan saran coach    if "BUY" in coach_suggestion:        tips.append("- Pertimbangkan untuk 'Buy the Dip' jika ada koreksi sehat di tren naik.")        tips.append("- Pastikan volume perdagangan mendukung tren naik untuk validasi sinyal beli.")    elif "SELL" in coach_suggestion:        tips.append("- Jangan ragu untuk 'Cut Loss' jika harga bergerak berlawanan dengan prediksi.")        tips.append("- Waspada terhadap 'Dead Cat Bounce' sebelum melakukan pembelian di tren turun.")    elif "HOLD" in coach_suggestion:        tips.append("- Bersabar adalah strategi. Hindari overtrading di pasar yang tidak jelas arahnya.")        tips.append("- Perhatikan sentimen pasar dan peristiwa makro ekonomi untuk sinyal berikutnya.")    # Tips berdasarkan RSI    if rsi is not None:        if rsi > 70:            tips.append("- Aset ini berada di zona overbought, waspada potensi pembalikan atau koreksi harga.")            tips.append("- Pertimbangkan untuk mengurangi risiko atau mengambil keuntungan sebagian jika Anda sudah memiliki posisi Long.")        elif rsi < 30:            tips.append("- Aset ini berada di zona oversold, ada potensi rebound harga dalam waktu dekat.")            tips.append("- Peluang akumulasi bisa terbuka, namun tunggu konfirmasi pembalikan tren.")        # Tips berdasarkan MACD    if macd_status == "Golden Cross":        tips.append("- Golden Cross mengkonfirmasi momentum bullish, perhatikan kelanjutan tren.")    elif macd_status == "Death Cross":        tips.append("- Death Cross menandakan momentum bearish yang kuat, tetap waspada terhadap penurunan lebih lanjut.")        # Tips spesifik Crypto/Forex    if is_crypto:        tips.append("- Gunakan strategi Dollar-Cost Averaging (DCA) untuk meminimalkan risiko volatilitas harga kripto.")    else: # Forex        tips.append("- Selalu perhatikan rilis data ekonomi penting dan pidato bank sentral, karena dampaknya besar pada pasar Forex.")        tips.append("- Kelola leverage dengan bijak, risiko di Forex sangat tinggi.")    random.shuffle(tips)    return tips[:random.randint(4, 6)]def display_analysis_results(current_price, change_7_day, change_30_day, ema7, ema25, ema99, rsi, macd_status, cut_loss_plan, target_profit, market_psychology, trend_24h, ai_prediction, coach_suggestion, is_crypto=True, is_forex_simulated=False, long_short_analysis="", candlestick_patterns=None):    """Menampilkan hasil analisis ke konsol."""        width = get_terminal_width()    price_format_func = format_idr if is_crypto else lambda x: f"{x:.4f}"        print_wrapped(f"📈 Harga Saat Ini: {price_format_func(current_price)}", width=width)    print_wrapped(f"📅 Perubahan 7 Hari: {change_7_day:.2f}%" if change_7_day is not None else "📅 Perubahan 7 Hari: N/A", width=width)    print_wrapped(f"📅 Perubahan 30 Hari: {change_30_day:.2f}%" if change_30_day is not None else "📅 Perubahan 30 Hari: N/A", width=width)    print_wrapped(f"📊 EMA-7: {price_format_func(ema7)}" if ema7 is not None else "📊 EMA-7: N/A", width=width)    print_wrapped(f"📊 EMA-25: {price_format_func(ema25)}" if ema25 is not None else "📊 EMA-25: N/A", width=width)    print_wrapped(f"📊 EMA-99: {price_format_func(ema99)}" if ema99 is not None else "📊 EMA-99: N/A", width=width)        # Interpretasi RSI    rsi_interpretation = ""    if rsi is not None:        if rsi > 70:            rsi_interpretation = " (Overbought - Potensi Koreksi)"        elif rsi < 30:            rsi_interpretation = " (Oversold - Potensi Rebound)"        else:            rsi_interpretation = " (Netral)"    print_wrapped(f"📈 RSI: {rsi:.2f}{rsi_interpretation}" if rsi is not None else "📈 RSI: N/A", width=width)    # Interpretasi MACD    macd_interpretation = ""    if macd_status == "Golden Cross":        macd_interpretation = " (Sinyal Bullish Kuat)"    elif macd_status == "Death Cross":        macd_interpretation = " (Sinyal Bearish Kuat)"    else:        macd_interpretation = " (Tanpa Sinyal Jelas)"    print_wrapped(f"📉 MACD: {macd_status}{macd_interpretation}" if macd_status is not None else "📉 MACD: N/A", width=width)        print_wrapped(f"🛡️ Cut Loss Plan: {price_format_func(cut_loss_plan)}", width=width)    print_wrapped(f"🎯 Target Profit: {price_format_func(target_profit)}", width=width)        print("\n🧠 Psikologi Market:")    print_wrapped(market_psychology, width=width, initial_indent="", subsequent_indent="")    print(f"\n📈 Tren {'Coin' if is_crypto else 'Pair'} (24 Jam):")    print_wrapped(trend_24h, width=width, initial_indent="", subsequent_indent="")    # Analisis Posisi Long/Short Baru    if long_short_analysis:        print("\n📊 ANALISIS POSISI (Long/Short):")        print_wrapped(long_short_analysis, width=width, initial_indent="", subsequent_indent="")    # Pola Candlestick di Analisis Utama (BARU)    if is_crypto and candlestick_patterns: # Hanya tampilkan di crypto        print("\n🕯️ POLA CANDLESTICK TERIDENTIFIKASI:")        # Cek apakah pola pertama adalah 'DATA TIDAK CUKUP'        if candlestick_patterns and candlestick_patterns[0]["name"] == "DATA TIDAK CUKUP":            print_wrapped(f"  - {candlestick_patterns[0]['description']}", width=width, initial_indent="  - ", subsequent_indent="    ")        else:            for i, pattern in enumerate(candlestick_patterns):                # Calculate effective content width for wrapping                indent_level_1 = "  "                indent_level_2 = "     "                                print_wrapped(f"{i+1}. Pola: {pattern['name']} ({pattern['type']})", width=width, initial_indent=indent_level_1, subsequent_indent=indent_level_1)                                # Wrap Deskripsi                print_wrapped(                    f"Deskripsi: {pattern['description']}",                    width=width,                    initial_indent=indent_level_2,                    subsequent_indent=indent_level_2                )                # Wrap Saran Tindakan                print_wrapped(                    f"Saran Tindakan: {pattern['action']}",                    width=width,                    initial_indent=indent_level_2,                    subsequent_indent=indent_level_2                )                if i < len(candlestick_patterns) - 1:                    print("-" * (width // 2)) # Garis pemisah kecil        print("\n🔮 Prediksi AI Coach:")    if is_forex_simulated:        print_wrapped(f"Prediksi AI (berbasis analisis teknikal dan historis prediksi): {ai_prediction}", width=width)    else:        print_wrapped(f"Prediksi AI (berdasarkan analisis teknikal dan sentimen pasar): {ai_prediction}", width=width)    print("\n📣 Saran Coach (Buy / Sell / Hold):")    print_wrapped(coach_suggestion, width=width)        print("\n📌 Tips:")    dynamic_tips = get_dynamic_tips(coach_suggestion, market_psychology, rsi, macd_status, is_crypto)    for tip in dynamic_tips:        print_wrapped(tip, width=width, initial_indent="", subsequent_indent="")def handle_ai_questions(coach_suggestion, market_psychology, cut_loss_plan, asset_name, is_crypto=True, is_forex_simulated=False):    """Menangani pertanyaan interaktif dari pengguna untuk AI Agent."""    width = get_terminal_width()    price_format_func = format_idr if is_crypto else lambda x: f"{x:.4f}"    print("\n--------------------------------------------------")    print_wrapped("Apakah ada pertanyaan lebih lanjut untuk AI Agent?", width=width)    print_wrapped("1. Berapa rekomendasi stop loss?", width=width, initial_indent="")    print_wrapped("2. Bagaimana berita terkini terkait aset ini?", width=width, initial_indent="")    print_wrapped("3. Tindakan yang tepat sekarang?", width=width, initial_indent="")    print_wrapped("4. Saran psikologi market?", width=width, initial_indent="")    print_wrapped("5. Pola candlestick dan perkiraan naik/turun?", width=width, initial_indent="")    print_wrapped("6. Kembali ke menu utama", width=width, initial_indent="")        choice = input("\nPilih nomor atau ketik pertanyaan Anda: ").strip().lower()    if choice == '1':        print_wrapped(f"\nAI Agent: Rekomendasi stop loss Anda adalah di sekitar {price_format_func(cut_loss_plan)}. Ini adalah level krusial untuk membatasi potensi kerugian.", width=width, initial_indent="AI Agent: ")    elif choice == '2':        if is_forex_simulated:            print_wrapped("\nAI Agent: Untuk berita terkini Forex, Anda perlu memantau kalender ekonomi (NFP, CPI, suku bunga) dan berita geopolitik dari sumber berita keuangan resmi. Data di sini adalah prediksi.", width=width, initial_indent="AI Agent: ")        elif is_crypto:            print_wrapped("\n--- Berita Kripto Terkini ---", width=width)            news_headlines = get_crypto_news(query_term=asset_name if asset_name and asset_name != 'crypto' else 'cryptocurrency')             if news_headlines:                for headline in news_headlines:                    print_wrapped(headline, width=width, initial_indent="- ", subsequent_indent="  ")            else:                print_wrapped("Tidak ada berita terkini yang ditemukan untuk topik ini.", width=width)            print_wrapped("-----------------------------", width=width)            print_wrapped("Sumber berita: NewsData.io.", width=width)     elif choice == '3':        print_wrapped(f"\nAI Agent: Berdasarkan analisis terkini, saran tindakan yang tepat adalah {coach_suggestion.replace('🟢 ', '').replace('🔴 ', '').replace('⏸️ ', '')}. Selalu konfirmasi dengan strategi dan toleransi risiko Anda.", width=width, initial_indent="AI Agent: ")    elif choice == '4':        print_wrapped(f"\nAI Agent: Psikologi market saat ini menunjukkan: {market_psychology.replace('😐 ', '').replace('Optimisme ', '').replace('Panik ', '')}. Penting untuk mengelola emosi Anda di tengah sentimen pasar.", width=width, initial_indent="AI Agent: ")    elif choice == '5':        print_wrapped("\nAI Agent: Untuk interpretasi rinci pola candlestick, silakan lihat bagian '🕯️ POLA CANDLESTICK TERIDENTIFIKASI:' di analisis utama di atas.", width=width, initial_indent="AI Agent: ")    elif choice == '6':        return False    else:        print_wrapped("\nAI Agent: Maaf, saya tidak memahami pertanyaan Anda. Silakan pilih nomor yang tersedia atau ketik pertanyaan terkait analisis.", width=width, initial_indent="AI Agent: ")    time.sleep(3)    input("Tekan Enter untuk melanjutkan analisis...")    return Truedef analyze_crypto_coin():    """Melakukan analisis koin kripto."""    clear_screen()    width = get_terminal_width()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("🔍 ANALISIS AI COIN CRYPTO", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Mengambil data harga...", width=width)    coin_name = input("🔍 Masukkan nama koin (contoh: bitcoin, solana, ethereum): ").lower().strip()    while True:        clear_screen()        print("╔" + "═" * (width - 2) + "╗")        print("║" + center_text(f"Analisis AI Coin Crypto ({coin_name.capitalize()})", width - 2) + "║")        print("╚" + "═" * (width - 2) + "╝\n")                prices_only_data, ohlc_data = get_historical_prices_binance(coin_name, limit=100) # Menggunakan Binance                current_price = prices_only_data[-1] if len(prices_only_data) > 0 else None        if current_price is None or len(prices_only_data) < 30: # Pastikan cukup data untuk EMA99 & pola            print_wrapped("❌ Gagal mengambil data koin dari Binance. Pastikan nama koin benar (misal: 'BTC', 'ETH'), cek koneksi internet, atau ada masalah dengan Binance API.", width=width, initial_indent="❌ ")            print_wrapped("Minimal 30 hari data diperlukan untuk analisis lengkap.", width=width, initial_indent="   ")            print_wrapped("Tekan Enter untuk kembali ke menu utama.", width=width)            input()            return        change_7_day = None        change_30_day = None        if len(prices_only_data) >= 7 and prices_only_data[-7] != 0:            change_7_day = ((current_price - prices_only_data[-7]) / prices_only_data[-7]) * 100        if len(prices_only_data) >= 30 and prices_only_data[-30] != 0:            change_30_day = ((current_price - prices_only_data[-30]) / prices_only_data[-30]) * 100                perubahan_24h = None        if len(prices_only_data) >= 2: # price_24h_ago adalah close dari candle harian sebelumnya            price_24h_ago = prices_only_data[-2]             if price_24h_ago != 0:                perubahan_24h = ((current_price - price_24h_ago) / price_24h_ago) * 100        ema7 = calculate_ema_py(prices_only_data, 7)        ema25 = calculate_ema_py(prices_only_data, 25)        ema99 = calculate_ema_py(prices_only_data, 99)        rsi = calculate_rsi_py(prices_only_data)        macd_status = calculate_macd_py(prices_only_data, 12, 26, 9)        # Deteksi pola candlestick        candlestick_patterns = detect_candlestick_pattern(ohlc_data)        cut_loss_plan = current_price * 0.88        target_profit = current_price * 1.15        market_psychology = "😐 Market tenang, masih konsolidasi."        coin_trend_24h = "📊 Tren Harian: Konsolidasi ↔️"        ai_prediction = f"Konsolidasi di sekitar {format_idr(current_price)}."        coach_suggestion = "⏸️ HOLD"        long_short_analysis_text = ""        if perubahan_24h is not None and rsi is not None and ema7 is not None and ema25 is not None:            if (perubahan_24h > 2 and rsi < 65 and macd_status == "Golden Cross" and ema7 > ema25):                market_psychology = "Optimisme melonjak, sentimen bullish sangat kuat. Peluang akumulasi."                coin_trend_24h = "📊 Tren Harian: Bullish Kuat ✅ (Momentum Akseleratif)"                ai_prediction = f"📈 Kemungkinan besar akan melanjutkan kenaikan menuju {format_idr(current_price * 1.08)}. Koreksi minor adalah peluang masuk."                coach_suggestion = "🟢 SANGAT BUY (Posisi LONG disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren naik. Posisi LONG direkomendasikan dengan manajemen risiko ketat. Konfirmasi dari beberapa indikator teknikal."            elif (perubahan_24h < -2 and rsi > 35 and macd_status == "Death Cross" and ema7 < ema25):                market_psychology = "Kepanikan menyelimuti pasar, sentimen bearish sangat dominan. Waspada penurunan tajam."                coin_trend_24h = "📊 Tren Harian: Bearish Kuat 🔻 (Momentum Deselerasi)"                ai_prediction = f"📉 Prediksi penurunan berkelanjutan, potensi menyentuh {format_idr(current_price * 0.92)}. Hindari menangkap pisau jatuh."                coach_suggestion = "🔴 SANGAT SELL (Posisi SHORT disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren turun. Posisi SHORT direkomendasikan dengan target profit di level support berikutnya."            else:                 market_psychology = "😐 Market tenang, masih dalam fase konsolidasi atau sideway. Sentimen campuran."                coin_trend_24h = "📊 Tren Harian: Sideways ↔️ (Kurangnya Arah Jelas)"                ai_prediction = f"🔎 Arah pasar masih belum jelas, harga bergerak di sekitar {format_idr(current_price)}. Tunggu konfirmasi breakout atau berita fundamental yang signifikan."                coach_suggestion = "⏸️ HOLD (Waspada, tunggu sinyal lebih jelas)"                long_short_analysis_text = "Pasar berada dalam fase konsolidasi. Hindari posisi besar sampai ada konfirmasi breakout. Lakukan akumulasi kecil di area support atau distribusi di area resistance."        if rsi is not None:            if rsi > 75:                 coach_suggestion = "🔴 SANGAT SELL (Overbought Ekstrem, risiko koreksi sangat tinggi)"                ai_prediction = f"📈 Waspada koreksi signifikan, aset berada dalam kondisi overbought ekstrem. Prediksi penurunan jangka pendek sangat tinggi."                market_psychology = "Euforia pasar berlebihan, koreksi besar bisa terjadi kapan saja."                long_short_analysis_text = "Aset sangat overbought. Pertimbangkan untuk menutup posisi LONG atau membuka posisi SHORT jangka pendek dengan hati-hati."            elif rsi < 25:                 coach_suggestion = "🟢 SANGAT BUY (Oversold Ekstrem, potensi rebound sangat kuat)"                ai_prediction = f"📉 Potensi pembalikan naik sangat tinggi, aset berada dalam kondisi oversold ekstrem. Prediksi kenaikan signifikan dalam jangka pendek."                market_psychology = "Ketakutan berlebihan di pasar, peluang rebound besar sedang menanti."                long_short_analysis_text = "Aset sangat oversold. Peluang kuat untuk posisi LONG, namun tunggu konfirmasi awal pembalikan."                if macd_status == "Death Cross":            if "BUY" in coach_suggestion:                  coach_suggestion = "⏸️ HOLD (Waspada, sinyal Death Cross muncul)"                 ai_prediction = "📉 MACD Death Cross mengindikasikan tekanan jual. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Death Cross menandakan perubahan momentum negatif. Hati-hati dengan posisi LONG."            elif "SELL" not in coach_suggestion:                  coach_suggestion = "🔴 SELL (Sinyal bearish kuat terkonfirmasi)"                 ai_prediction = f"📉 Waspada turun lebih jauh. MACD Death Cross mengkonfirmasi tren bearish yang kuat. Prediksi penurunan berkelanjutan."                 long_short_analysis_text = "Death Cross mengkonfirmasi tren bearish. Pertimbangkan posisi SHORT."        elif macd_status == "Golden Cross":            if "SELL" in coach_suggestion:                  coach_suggestion = "⏸️ HOLD (Waspada, sinyal Golden Cross muncul)"                 ai_prediction = "📈 MACD Golden Cross mengindikasikan momentum beli. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Golden Cross menandakan perubahan momentum positif. Hati-hati dengan posisi SHORT."            elif "BUY" not in coach_suggestion:                  coach_suggestion = "🟢 BUY (Sinyal bullish kuat terkonfirmasi)"                 ai_prediction = f"📈 Potensi kenaikan lebih lanjut. MACD Golden Cross mengkonfirmasi tren bullish yang kuat. Prediksi kenaikan berkelanjutan."                 long_short_analysis_text = "Golden Cross mengkonfirmasi tren bullish. Pertimbangkan posisi LONG."        display_analysis_results(current_price, change_7_day, change_30_day, ema7, ema25, ema99, rsi, macd_status, cut_loss_plan, target_profit, market_psychology, coin_trend_24h, ai_prediction, coach_suggestion, is_crypto=True, is_forex_simulated=False, long_short_analysis=long_short_analysis_text, candlestick_patterns=candlestick_patterns)        if not handle_ai_questions(coach_suggestion, market_psychology, cut_loss_plan, coin_name, is_crypto=True, is_forex_simulated=False):            return                time.sleep(REFRESH_INTERVAL_SECONDS)def analyze_forex_pair():    """Melakukan analisis pasangan Forex."""    clear_screen()    width = get_terminal_width()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("📊 ANALISIS AI FOREX", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Mengambil data harga...", width=width)    pair_name = input("🔍 Masukkan nama pasangan Forex (contoh: XAUUSD, EURUSD): ").upper().strip()    simulated_price_initial = 1950.00 if pair_name == "XAUUSD" else (1.0800 if pair_name == "EURUSD" else 1.2500)    simulated_price = simulated_price_initial    historical_simulated_prices = [simulated_price_initial * (1 + random.uniform(-0.01, 0.01)) for _ in range(100)] # Menggunakan list biasa    historical_simulated_prices.append(simulated_price_initial)    while True:        clear_screen()        print("╔" + "═" * (width - 2) + "╗")        print("║" + center_text(f"Analisis AI Forex ({pair_name})", width - 2) + "║")        print("╚" + "═" * (width - 2) + "╝\n")                change_magnitude = simulated_price * 0.0005        simulated_price += random.uniform(-change_magnitude, change_magnitude)                if pair_name == "XAUUSD":            simulated_price = round(simulated_price, 2)        else:            simulated_price = round(simulated_price, 5)        historical_simulated_prices.append(simulated_price)        if len(historical_simulated_prices) > 100:            historical_simulated_prices.pop(0) # Menggunakan pop untuk list biasa        change_7_day = None        change_30_day = None        perubahan_24h = None        if len(historical_simulated_prices) >= 7 and historical_simulated_prices[-7] != 0:            change_7_day = ((simulated_price - historical_simulated_prices[-7]) / historical_simulated_prices[-7]) * 100        if len(historical_simulated_prices) >= 30 and historical_simulated_prices[-30] != 0:            change_30_day = ((simulated_price - historical_simulated_prices[-30]) / historical_simulated_prices[-30]) * 100        if len(historical_simulated_prices) > 0 and historical_simulated_prices[0] != 0:            perubahan_24h = ((simulated_price - historical_simulated_prices[0]) / historical_simulated_prices[0]) * 100        ema7 = calculate_ema_py(historical_simulated_prices, 7)        ema25 = calculate_ema_py(historical_simulated_prices, 25)        ema99 = calculate_ema_py(historical_simulated_prices, 99)        rsi = calculate_rsi_py(historical_simulated_prices)        macd_status = calculate_macd_py(historical_simulated_prices, 12, 26, 9)        cut_loss_plan = simulated_price * 0.995        target_profit = simulated_price * 1.008        market_psychology = "😐 Market tenang, masih konsolidasi."        pair_trend_24h = "📊 Tren Harian: Konsolidasi ↔️"        ai_prediction = f"Konsolidasi di sekitar {simulated_price:.4f}."        coach_suggestion = "⏸️ HOLD"        long_short_analysis_text = "" # Inisialisasi analisis long/short untuk Forex        if perubahan_24h is not None and rsi is not None and ema7 is not None and ema25 is not None:            if (perubahan_24h > 0.2 and rsi < 65 and macd_status == "Golden Cross" and ema7 > ema25):                market_psychology = "Optimisme melonjak, sentimen bullish sangat kuat. Peluang akumulasi."                pair_trend_24h = "📊 Tren Harian: Bullish Kuat ✅ (Momentum Akseleratif)"                ai_prediction = f"📈 Prediksi kenaikan signifikan terkonfirmasi, target menuju {round(simulated_price * 1.008, 4)}. Koreksi minor adalah peluang masuk."                coach_suggestion = "🟢 SANGAT BUY (Posisi LONG disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren naik. Posisi LONG direkomendasikan dengan manajemen risiko ketat. Konfirmasi dari beberapa indikator teknikal."            elif (perubahan_24h < -0.2 and rsi > 35 and macd_status == "Death Cross" and ema7 < ema25):                market_psychology = "Kepanikan menyelimuti pasar, sentimen bearish sangat dominan. Waspada penurunan tajam."                pair_trend_24h = "📊 Tren Harian: Bearish Kuat 🔻 (Momentum Deselerasi)"                ai_prediction = f"📉 Prediksi penurunan berkelanjutan, potensi menyentuh {round(simulated_price * 0.992, 4)}. Hindari menangkap pisau jatuh."                coach_suggestion = "🔴 SANGAT SELL (Posisi SHORT disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren turun. Posisi SHORT direkomendasikan dengan target profit di level support berikutnya."            else:                 market_psychology = "😐 Market tenang, masih dalam fase konsolidasi atau sideway. Sentimen campuran."                pair_trend_24h = "📊 Tren Harian: Sideways ↔️ (Kurangnya Arah Jelas)"                ai_prediction = f"🔎 Arah pasar masih belum jelas, harga bergerak di sekitar {simulated_price:.4f}. Tunggu konfirmasi breakout atau berita fundamental yang signifikan."                coach_suggestion = "⏸️ HOLD (Waspada, tunggu sinyal lebih jelas)"                long_short_analysis_text = "Pasar berada dalam fase konsolidasi. Hindari posisi besar sampai ada konfirmasi breakout. Lakukan akumulasi kecil di area support atau distribusi di area resistance."        if rsi is not None:            if rsi > 75:                 coach_suggestion = "🔴 SANGAT SELL (Overbought Ekstrem, risiko koreksi sangat tinggi)"                ai_prediction = f"📈 Waspada koreksi signifikan, aset berada dalam kondisi overbought ekstrem. Prediksi penurunan jangka pendek sangat tinggi."                market_psychology = "Euforia pasar berlebihan, koreksi besar bisa terjadi kapan saja."                long_short_analysis_text = "Aset sangat overbought. Pertimbangkan untuk menutup posisi LONG atau membuka posisi SHORT jangka pendek dengan hati-hati."            elif rsi < 25:                 coach_suggestion = "🟢 SANGAT BUY (Oversold Ekstrem, potensi rebound sangat kuat)"                ai_prediction = f"📉 Potensi pembalikan naik sangat tinggi, aset berada dalam kondisi oversold ekstrem. Prediksi kenaikan signifikan dalam jangka pendek."                market_psychology = "Ketakutan berlebihan di pasar, peluang rebound besar sedang menanti."                long_short_analysis_text = "Aset sangat oversold. Peluang kuat untuk posisi LONG, namun tunggu konfirmasi awal pembalikan."                if macd_status == "Death Cross":            if "BUY" in coach_suggestion:                  coach_suggestion = "⏸️ HOLD (Waspada, sinyal Death Cross muncul)"                 ai_prediction = "📉 MACD Death Cross mengindikasikan tekanan jual. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Death Cross menandakan perubahan momentum negatif. Hati-hati dengan posisi LONG."            elif "SELL" not in coach_suggestion:                  coach_suggestion = "🔴 SELL (Sinyal bearish kuat terkonfirmasi)"                 ai_prediction = f"📉 Waspada turun lebih jauh. MACD Death Cross mengkonfirmasi tren bearish yang kuat. Prediksi penurunan berkelanjutan."                 long_short_analysis_text = "Death Cross mengkonfirmasi tren bearish. Pertimbangkan posisi SHORT."        elif macd_status == "Golden Cross":            if "SELL" in coach_suggestion:                  coach_suggestion = "⏸️ HOLD (Waspada, sinyal Golden Cross muncul)"                 ai_prediction = "📈 MACD Golden Cross mengindikasikan momentum beli. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Golden Cross menandakan perubahan momentum positif. Hati-hati dengan posisi SHORT."            elif "BUY" not in coach_suggestion:                  coach_suggestion = "🟢 BUY (Sinyal bullish kuat terkonfirmasi)"                 ai_prediction = f"📈 Potensi kenaikan lebih lanjut. MACD Golden Cross mengkonfirmasi tren bullish yang kuat. Prediksi kenaikan berkelanjutan."                 long_short_analysis_text = "Golden Cross mengkonfirmasi tren bullish. Pertimbangkan posisi LONG."        display_analysis_results(simulated_price, change_7_day, change_30_day, ema7, ema25, ema99, rsi, macd_status, cut_loss_plan, target_profit, market_psychology, pair_trend_24h, ai_prediction, coach_suggestion, is_crypto=False, is_forex_simulated=True, long_short_analysis=long_short_analysis_text, candlestick_patterns=[]) # Forex tidak ada pola candlestick detection        if not handle_ai_questions(coach_suggestion, market_psychology, cut_loss_plan, pair_name, is_crypto=False, is_forex_simulated=True):            return                time.sleep(REFRESH_INTERVAL_SECONDS)# --- Menu Utama ---def main_menu():    """Menampilkan menu utama aplikasi."""    while True:         clear_screen()        width = get_terminal_width()                # Border atas yang disesuaikan lebar terminal        top_border = "╔" + "═" * (width - 2) + "╗"        bottom_border = "╚" + "═" * (width - 2) + "╝"        middle_border = "╠" + "═" * (width - 2) + "╣"                # Isi menu, dengan padding dinamis        title_line = "║" + center_text("💎 Crypto-Terminal AI: ANALYZER PRO 📈", width - 2) + "║"        empty_line = "║" + " " * (width - 2) + "║"                # Opsi menu tanpa deskripsi dalam kurung        option1 = "   [1] 📊 ANALISIS COIN CRYPTO"        option2 = "   [2] 📈 ANALISIS FOREX"        option3 = "   [3] 🤖 AI COACH MENTOR"        option0 = "   [0] ❌ KELUAR DARI APLIKASI"        # Padding untuk opsi menu        option1_padded = "║" + option1 + " " * (width - 2 - len(option1)) + "║"        option2_padded = "║" + option2 + " " * (width - 2 - len(option2)) + "║"        option3_padded = "║" + option3 + " " * (width - 2 - len(option3)) + "║"        option0_padded = "║" + option0 + " " * (width - 2 - len(option0)) + "║"        # Mencetak menu        print(top_border)        print(title_line)        print(middle_border)        print(empty_line)        print(option1_padded)        print(option2_padded)        print(option3_padded)        print(empty_line)        print(option0_padded)        print(empty_line)        print(bottom_border)        print("\n" + center_text("🚀 SIAP UNTUK MENGUASAI PASAR? PILIH OPSI ANDA! 🚀", width))        pilihan = input("\n➡️ Pilihan Anda: ").strip()        if pilihan == '1':            analyze_crypto_coin()        elif pilihan == '2':            analyze_forex_pair()        elif pilihan == '3':            start_general_ai_coach_conversation()         elif pilihan == '0':            print_wrapped("\n👋 Sampai jumpa! Terima kasih telah menggunakan AI Trading Assistant.", width=width)            break         else:            print_wrapped("❌ Pilihan tidak valid, silakan coba lagi.", width=width, initial_indent="❌ ")            time.sleep(1)# --- Jalankan Aplikasi ---if __name__ == "__main__":    try:        import requests        # import numpy # numpy tidak lagi diperlukan, tapi jika ada error import, ini bisa dihapus        import re        import textwrap     except ImportError as e:        print(f"ERROR: Pustaka yang diperlukan tidak ditemukan: {e}. Harap instal dengan: pip install requests")        print("Pastikan pustaka 're' (regex) dan 'textwrap' sudah tersedia atau diinstal.")        exit()    if login():        main_menu()